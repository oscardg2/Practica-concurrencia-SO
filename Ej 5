#include <stdio.h>
#include <stdlib.h>
#include <limits.h> // Para INT_MAX
#include "my_lib.h" // Incluye las definiciones de my_stack y funciones asociadas

// Función para procesar la pila y calcular los valores requeridos
void process_stack(struct my_stack *stack) {
    if (stack == NULL) {
        fprintf(stderr, "Error: La pila es nula.\n");
        return;
    }

    int count = 0;
    int sum = 0;
    int min = INT_MAX;
    int max = INT_MIN;

    while (stack->top != NULL) {
        // Extraer el nodo superior
        int *data = (int *)my_stack_pop(stack);
        if (data == NULL) {
            fprintf(stderr, "Error: Nodo vacío en la pila.\n");
            continue;
        }

        // Calcular suma, mínimo y máximo
        sum += *data;
        if (*data < min) min = *data;
        if (*data > max) max = *data;

        // Contar el nodo
        count++;

        // Liberar memoria del dato
        free(data);
    }

    // Calcular y mostrar la media
    double average = (count > 0) ? (double)sum / count : 0;

    printf("Resultados:\n");
    printf("Suma: %d\n", sum);
    printf("Mínimo: %d\n", min);
    printf("Máximo: %d\n", max);
    printf("Media: %.2f\n", average);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Uso: %s <nombre_del_archivo>\n", argv[0]);
        return 1;
    }

    char *filename = argv[1];

    // Leer la pila desde el archivo
    struct my_stack *stack = my_stack_read(filename);
    if (stack == NULL) {
        fprintf(stderr, "Error al leer la pila desde el archivo.\n");
        return 1;
    }

    printf("Procesando la pila desde el archivo '%s'...\n", filename);

    // Procesar la pila
    process_stack(stack);

    // Liberar toda la memoria asociada a la pila
    my_stack_purge(stack);

    return 0;
}
